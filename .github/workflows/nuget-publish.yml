name: Build and Publish NuGet Packages
on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:
jobs:
  build-and-publish:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          6.0.x
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1
      with:
        nuget-version: '6.x'
    - name: Determine version
      id: get_version
      shell: pwsh
      run: |
        $buildPath = "RevitMCPSDK/build.ps1"
        $baseVersion = "beta"
        
        if (Test-Path $buildPath) {
          $baseVersion = Get-Content -Path $buildPath | Select-String -Pattern '\$baseVersion\s*=\s*"([^"]+)"' | ForEach-Object { $_.Matches.Groups[1].Value }
        }
        
        $tagName = "${{ github.ref }}"
        if ($tagName -match 'refs/tags/v(.+)') {
          $baseVersion = $matches[1]
        }
        
        echo "BASE_VERSION=$baseVersion" >> $env:GITHUB_ENV
        echo "BUILD_PATH=$buildPath" >> $env:GITHUB_ENV
    - name: Build NuGet packages
      shell: pwsh
      run: |
        $buildPath = "${{ env.BUILD_PATH }}"
        
        if (Test-Path $buildPath) {
          if ("${{ github.ref }}" -match 'refs/tags/v') {
            $buildScript = Get-Content -Path $buildPath -Raw
            $buildScript = $buildScript -replace '(\$baseVersion\s*=\s*")[^"]+(")','$1${{ env.BASE_VERSION }}$2'
            Set-Content -Path $buildPath -Value $buildScript
          }
          
          cd (Split-Path -Path $buildPath)
          ./build.ps1
        } else {
          Write-Error "Cannot find build script at $buildPath"
          exit 1
        }
    - name: Publish to NuGet.org
      shell: pwsh
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        $nupkgPath = "RevitMCPSDK/nupkg"
        if (!(Test-Path $nupkgPath)) {
          $nupkgPath = "./nupkg"
        }
        
        if (Test-Path $nupkgPath) {
          foreach ($nupkg in Get-ChildItem -Path "$nupkgPath/*.nupkg") {
            dotnet nuget push $nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
        } else {
          Write-Error "Cannot find NuGet packages"
          exit 1
        }
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: RevitMCPSDK/nupkg/*.nupkg
        name: RevitMCPSDK ${{ env.BASE_VERSION }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}